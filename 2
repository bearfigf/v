def func13(arg65, arg66):
    var72 = func14(arg66, arg65)
    result = (arg65 | var72 + arg65) & (arg66 & var72)
    return result
def func14(arg67, arg68):
    var69 = arg67 - 92 | 613567808 & arg67 | arg68 + (((1660658558 ^ arg68) ^ (((arg67 & arg67) - ((-205 | -1693609299) + -268 ^ arg67) | ((-96 | -629 ^ arg67) - -914412624)) - arg67) ^ arg68) & -943079083 ^ arg68) + arg68
    if arg68 < arg67:
        var70 = (arg67 | -897) + arg67 + arg68
    else:
        var70 = -2 - 294
    var71 = ((186 - arg67) & ((((arg67 + -185) + (arg67 + arg68) - (var69 | (arg68 + arg68) & var69 & (arg68 | 1393049279) & arg67)) ^ arg68) ^ (arg68 + -226))) ^ 1146253429
    result = 821403470 - ((-789268981 - (arg67 ^ arg67) & arg67 - ((705 & var69) + var69) | var71 | var71) & arg68) & 2131505297
    return result
def func12(arg59, arg60):
    var61 = arg59 | arg60
    if arg60 < arg59:
        var62 = 272 ^ 889
    else:
        var62 = -322 + (502 - ((-509 & var61 - var61 - arg59) | var61))
    var63 = arg60 - var61 - (140 & 7282796)
    var64 = -353 | (((arg59 - (-961 & ((var61 & -1683678964 | arg59 - -909) & -2045811228) ^ (arg60 | (-942 + 54 + (var61 & var61 | 31932782))) & var61 - var61) - 1731449554 | arg59 + var61) - 130 & var61) & 297)
    result = var63 | (arg59 ^ arg60 + arg59)
    return result
def func1(arg1, arg2):
    var31 = func6()
    var41 = var34(var31, arg2)
    var45 = func10(var41, arg1)
    var46 = (var31 | (var41 ^ arg1)) ^ var31
    var47 = var31 & (var45 | arg1) - var41
    var48 = var47 ^ -717 + var47 ^ arg2
    var49 = 15593347 | (var41 | 528617683)
    var50 = var45 | arg2
    if var31 < arg1:
        var51 = (var46 ^ var50) ^ (var45 - var50)
    else:
        var51 = arg2 ^ (629 | arg2) ^ var46
    var52 = var49 - (arg1 & 386) & var41
    var53 = var52 - (var47 | var31) ^ var45
    var54 = var50 + var46 & var45
    var55 = var54 ^ ((var45 & var54) | var49)
    var56 = var55 - ((var49 ^ var49) ^ var46)
    var57 = var45 ^ var31
    var58 = arg1 & (var47 - var31) - var54
    result = (var50 ^ ((var53 + arg2 + var31) & (var31 & ((var50 & -301) | var31) - var45)) ^ arg1) + var58 | var47
    return result
def func9(arg35, arg36):
    var37 = (arg35 ^ (arg35 ^ ((-581 - -122406001 | -380) - arg35) + 1428279034 | -1840868247)) ^ arg35
    var38 = arg36 & ((var37 & var37 - (-1390930533 + -2063938050 + var37)) - var37 ^ 824)
    if arg35 < var37:
        var39 = arg36 & (-214 & var38)
    else:
        var39 = (856102714 + var37) + -850
    var40 = -83773333 - (668 ^ var38)
    result = -48724450 | 1617621027
    return result
def func8():
    closure = [5]
    def func7(arg32, arg33):
        closure[0] += func9(arg32, arg33)
        return closure[0]
    func = func7
    return func
var34 = func8()
def func6():
    func2()
    result = len(func4(7, -10))
    func3()
    return result
def func5(arg5, arg6):
    var7 = arg5 - arg5
    var8 = arg6 | var7 | (arg5 & arg5)
    var9 = var7 + var7 | var8 & var7
    var10 = var8 & -119129972
    var11 = var10 | var8 ^ arg5 & var9
    if var11 < var11:
        var12 = var8 ^ var8
    else:
        var12 = var7 ^ 1814725199 & var7 - var10
    if arg5 < arg6:
        var13 = ((arg6 | -923) + arg6) + var10
    else:
        var13 = (arg6 & var7 - var9) - arg6
    var14 = var11 + (var8 | arg5) & arg5
    var15 = var11 | var14
    var16 = 23 & (-855 | arg6) ^ var9
    var17 = var16 - arg5 - 891114848
    var18 = var17 & var17 | var11 | -251519500
    var19 = (var16 & 952975556) - var14 & var14
    result = (var17 + var14) - var11
    return result
def func4(arg3, arg4):
    var20 = func5(arg4, 96)
    yield var20
    var21 = (1012667533 | -583 ^ 2003161945) | arg4
    yield var21
    var22 = ((-242527957 | 1316092597) - 427) | 261
    yield var22
    var23 = (360 & arg4 ^ var21) + -1507988857
    yield var23
    var24 = 786238408 & var21
    yield var24
    var25 = var24 ^ var23
    yield var25
    var26 = var23 - -451870463
    yield var26
    var27 = (var23 | 716 | var23) | var22
    yield var27
    var28 = var22 | -1719924929
    yield var28
    var29 = var26 + var25 | (var21 | var25)
    yield var29
    var30 = var25 ^ var23
    yield var30
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
def func10(arg42, arg43):
    closure = [0]
    def func11(acc, rest):
        var44 = ((((-3 | closure[0]) ^ -3 | -3) + -3) & -1) - closure[0]
        closure[0] += var44
        if acc == 0:
            return var44
        else:
            result = func11(acc - 1, var44)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 4'
    print 'func_number: 12'
    print 'arg_number: 59'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 4'
    print 'func_number: 13'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func12(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 15'
    print 'arg_number: 73'
    for i in xrange(25000):
        x = 5
        x = func13(x, i)
        print x,
